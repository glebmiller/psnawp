============================= test session starts ==============================
platform linux -- Python 3.11.3, pytest-7.2.1, pluggy-1.0.0
rootdir: /home/runner/work/psnawp/psnawp, configfile: pyproject.toml, testpaths: tests
plugins: vcr-1.0.2, cov-4.0.0
collected 68 items

tests/unit_tests/test_authenticator.py F                                 [  1%]
tests/unit_tests/test_client.py ..EEEEEEEEEEEEEEE                        [ 26%]
tests/unit_tests/test_game_title.py EEEEEEEEE                            [ 39%]
tests/unit_tests/test_group.py EEEEEEEEE                                 [ 52%]
tests/unit_tests/test_search.py EEE                                      [ 57%]
tests/unit_tests/test_user.py EEEEEEEEEEEEEEEEEEEEEEEEEEE                [ 97%]
tests/unit_tests/test_utils_misc.py ..                                   [100%]

==================================== ERRORS ====================================
___________________ ERROR at setup of test_client__online_id ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_client__account_id ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
______________ ERROR at setup of test_client__get_profile_legacy _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
________________ ERROR at setup of test_client__account_devices ________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_client__get_friends __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_client__get_groups ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_______________ ERROR at setup of test_client__available_to_play _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_client__blocked_list __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
________________ ERROR at setup of test_client__trophy_summary _________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_client__trophy_titles _________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
____________ ERROR at setup of test_client__trophy_titles_for_title ____________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
___________________ ERROR at setup of test_client__trophies ____________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_____________ ERROR at setup of test_client__trophy_groups_summary _____________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_client__title_stats __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_client__repr_and_str __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
____________ ERROR at setup of test_game_title__np_communication_id ____________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
______________ ERROR at setup of test_game_title__wrong_title_id _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_____________ ERROR at setup of test_game_title__get_title_details _____________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_game_title__trophies __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
___________ ERROR at setup of test_game_title__trophy_groups_summary ___________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
______ ERROR at setup of test_game_title__trophies_game_not_owned_by_user ______

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_ ERROR at setup of test_game_title__trophy_groups_summary_game_not_owned_by_user _

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
___ ERROR at setup of test_game_title__trophies_invalid_np_communication_id ____

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_ ERROR at setup of test_game_title__trophy_groups_summary_invalid_np_communication_id _

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
______________ ERROR at setup of test_group__group_incorrect_args ______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
______________ ERROR at setup of test_group__group_with_wrong_id _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
________________ ERROR at setup of test_group__group_with_users ________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_group__group_with_id __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_group__repr_and_str __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_group__change_name_dm _________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_______________ ERROR at setup of test_group__dming_blocked_user _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_group__change_name ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_group__leave_group ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_______________ ERROR at setup of test_search__universal_search ________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_search__get_title_id __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
___________ ERROR at setup of test_search__get_title_id_wrong_title ____________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
______________________ ERROR at setup of test_user__user _______________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_user__user_account_id _________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
________________ ERROR at setup of test_user__user_no_argument _________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
________________ ERROR at setup of test_user__user_wrong_acc_id ________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_user__prev_online_id __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_user__user_not_found __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_____________ ERROR at setup of test_user__user_acct_id_not_found ______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__get_profile ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_user__get_presence ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_____________ ERROR at setup of test_user__get_presence_forbidden ______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__friendship ____________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__is_blocked ____________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________________ ERROR at setup of test_user__trophy_summary __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
____________ ERROR at setup of test_user__trophy_summary_forbidden _____________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_user__trophy_titles __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_____________ ERROR at setup of test_user__trophy_titles_forbidden _____________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________ ERROR at setup of test_user__trophy_titles_pagination_test __________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_____________ ERROR at setup of test_user__trophy_titles_for_title _____________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
________ ERROR at setup of test_user__trophy_titles_for_title_forbidden ________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
____________________ ERROR at setup of test_user__trophies _____________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_______________ ERROR at setup of test_user__trophies_forbidden ________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
____________ ERROR at setup of test_user__trophies_pagination_test _____________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
______________ ERROR at setup of test_user__trophy_groups_summary ______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_________ ERROR at setup of test_user__trophy_groups_summary_forbidden _________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__title_stats ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
_____________ ERROR at setup of test_user__title_stats_with_limit ______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
__________________ ERROR at setup of test_user__repr_and_str ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
        """Creates PSNAWP Instance Fixture for running all the units tests.
    
        :returns: PSNAWP Instance
        :rtype: PSNAWP
    
        """
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f51427a1790>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about 2 months. After 2 months a new npsso
        code is needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError("Your npsso code has expired or is incorrect. Please generate a new code!")
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:118: PSNAWPAuthenticationError
=================================== FAILURES ===================================
_____________ test_authenticator__access_token_from_refresh_token ______________

    @pytest.mark.vcr()
    def test_authenticator__access_token_from_refresh_token():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
            psnawp = psnawp_api.psnawp.PSNAWP(os.getenv("NPSSO_CODE"))
            psnawp._request_builder.authenticator._auth_properties["access_token_expires_at"] = time.time() - 3600
            client = psnawp.me()
>           assert client.online_id == os.getenv("USER_NAME")
E           AssertionError: assert 'VaultTec-Co' == ''
E             + VaultTec-Co

tests/unit_tests/test_authenticator.py:17: AssertionError
-------- generated xml file: /home/runner/work/psnawp/psnawp/pytest.xml --------

---------- coverage: platform linux, python 3.11.3-final-0 -----------
Name                                                                                                                  Stmts   Miss  Cover
-----------------------------------------------------------------------------------------------------------------------------------------
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/__init__.py                                1      0   100%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/__init__.py                           0      0   100%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py                     46      3    93%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/core/psnawp_exceptions.py                  9      0   100%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/__init__.py                         0      0   100%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/client.py                          68     29    57%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/game_title.py                      22     10    55%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/group.py                           52     35    33%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/search.py                          22     12    45%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/title_stats.py                     64     26    59%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/trophies/__init__.py                0      0   100%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/trophies/trophy.py                112     50    55%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/trophies/trophy_constants.py       25      0   100%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/trophies/trophy_group.py           89     32    64%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/trophies/trophy_summary.py         25      5    80%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/trophies/trophy_titles.py          86     36    58%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/trophies/utility_functions.py       7      2    71%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/models/user.py                            69     41    41%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py                                 35     14    60%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/utils/__init__.py                          0      0   100%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/utils/endpoints.py                         2      0   100%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/utils/misc.py                             35      1    97%
/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/psnawp_api/utils/request_builder.py                  72     42    42%
-----------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                   841    338    60%

=========================== short test summary info ============================
FAILED tests/unit_tests/test_authenticator.py::test_authenticator__access_token_from_refresh_token - AssertionError: assert 'VaultTec-Co' == ''
  + VaultTec-Co
ERROR tests/unit_tests/test_client.py::test_client__online_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__account_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__get_profile_legacy - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__account_devices - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__get_friends - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__get_groups - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__available_to_play - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__blocked_list - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__trophy_summary - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__trophy_titles - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__trophy_titles_for_title - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__trophies - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__trophy_groups_summary - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__title_stats - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_client.py::test_client__repr_and_str - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_game_title.py::test_game_title__np_communication_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_game_title.py::test_game_title__wrong_title_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_game_title.py::test_game_title__get_title_details - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_game_title.py::test_game_title__trophies - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_game_title.py::test_game_title__trophy_groups_summary - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_game_title.py::test_game_title__trophies_game_not_owned_by_user - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_game_title.py::test_game_title__trophy_groups_summary_game_not_owned_by_user - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_game_title.py::test_game_title__trophies_invalid_np_communication_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_game_title.py::test_game_title__trophy_groups_summary_invalid_np_communication_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_group.py::test_group__group_incorrect_args - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_group.py::test_group__group_with_wrong_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_group.py::test_group__group_with_users - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_group.py::test_group__group_with_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_group.py::test_group__repr_and_str - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_group.py::test_group__change_name_dm - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_group.py::test_group__dming_blocked_user - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_group.py::test_group__change_name - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_group.py::test_group__leave_group - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_search.py::test_search__universal_search - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_search.py::test_search__get_title_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_search.py::test_search__get_title_id_wrong_title - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__user - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__user_account_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__user_no_argument - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__user_wrong_acc_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__prev_online_id - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__user_not_found - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__user_acct_id_not_found - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__get_profile - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__get_presence - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__get_presence_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__friendship - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__is_blocked - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophy_summary - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophy_summary_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophy_titles - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophy_titles_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophy_titles_pagination_test - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophy_titles_for_title - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophy_titles_for_title_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophies - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophies_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophies_pagination_test - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophy_groups_summary - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__trophy_groups_summary_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__title_stats - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__title_stats_with_limit - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/unit_tests/test_user.py::test_user__repr_and_str - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
==================== 1 failed, 4 passed, 63 errors in 1.53s ====================
